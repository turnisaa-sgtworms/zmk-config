#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600

#include <dt-bindings/zmk/pointing.h>

#define AS(keycode) &as LS(keycode) keycode   

/ {
	behaviors {
		td0: tap_dance_0 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LPAR>, <&kp RPAR>;
		};
		td1: tap_dance_1 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LBRC>,<&kp RBRC>;
		};
		td2: tap_dance_2 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LBKT>,<&kp RBKT>;
		};
		td3: tap_dance_3 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp TAB>,<&kp ESC>;
		};
		td4: tap_dance_4 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp C>,<&kp X>;
		};
		td5: tap_dance_5 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp F>,<&kp G>;
		};
		fmt: fast_mod_tap {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "hold-preferred";
            		tapping-term-ms = <125>;
            		bindings = <&kp>, <&kp>;
            		display-name = "Fast Mod-Tap";
        	};
		hml: home_row_mod_left {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "balanced";
            		require-prior-idle-ms = <100>;
            		tapping-term-ms = <250>;
            		quick-tap-ms = <175>;
            		bindings = <&kp>, <&kp>;
            		hold-trigger-key-positions = <3 4 5 10 11 12 13 16 17 19>; // List of keys on the right
            		hold-trigger-on-release;
        	};
        	hmr: home_row_mod_right {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "balanced";
            		require-prior-idle-ms = <100>;
            		tapping-term-ms = <250>;
            		quick-tap-ms = <175>;
            		bindings = <&kp>, <&kp>;
            		hold-trigger-key-positions = <0 1 2 6 7 8 9 14 15 18>; // List of keys on the left
            		hold-trigger-on-release;
        	};
		as: auto_shift {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		tapping_term_ms = <175>;
            		quick_tap_ms = <0>;
            		flavor = "tap-preferred";
            		bindings = <&kp>, <&kp>;
        	};
		hw_soft_off: hw_soft_off {
            		compatible = "zmk,behavior-soft-off";
            		#binding-cells = <0>;
            		split-peripheral-off-on-press; // Turn peripheral off immediately for reliability
            		hold-time-ms = <1500>; // Only turn off if the key is held for 1.5 seconds or longer.
        	};
		mt: mod_tap {
            		tapping-term-ms = <250>;
        	};
		krlt: key_repeat_layer_tap {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "hold-preferred";
            		tapping-term-ms = <250>;
            		bindings = <&mo>, <&key_repeat>;
            		display-name = "Key Repeat Layer-Tap";
        	};
	};
	keymap {
		compatible = "zmk,keymap";
		one {
			display-name = "zero base";
			bindings = <
				              &kp W &kp E &hml LGUI T 		&hmr RGUI U &kp I &kp O
				&hml LSHIFT A &kp S &hml LALT D &hml LCTRL F 	&hmr RCTRL H &hmr LALT K &kp L &hmr RSHIFT P
				                    &kp C &kp B 		&kp N &kp M
				                        &lt 2 SPACE		&lt 1 SPACE
			>;
		};
		two { display-name = "one numbers icons";
			bindings = <
				       AS(N1) AS(N2) AS(N3) 	&td0 &td1 &td2       
				AS(N0) AS(N4) AS(N5) AS(N6)    	AS(SEMI) AS(COMMA) AS(DOT) AS(FSLH)     
				              AS(N7) AS(N8)    	AS(APOS) AS(MINUS)     
						     AS(N9)   	&none
			>;
		};
		three { display-name = "two navigation and kb functions";
			bindings = <
				      &studio_unlock &bt BT_CLR_ALL &hw_soft_off 		&kp C_PREV &kp C_PP &kp C_NEXT
				&none &kp HOME &kp PGUP &kp END  				&kp LEFT &kp UP &kp RIGHT &none
				               &kp PGDN &none  					&kp C_VOL_UP &kp DOWN
				                       &none 					&kp C_VOL_DN
			>;
		};
		four { display-name = "three mouse";
			bindings = <
				      &none &none &none 				&mkp MB1 &mkp MB3 &mkp MB2
				&none &msc SCRL_LEFT &msc SCRL_UP &msc SCRL_RIGHT 	&mmv MOVE_LEFT &mmv MOVE_UP &mmv MOVE_RIGHT &none 
				                     &msc SCRL_DOWN &none 		&none &mmv MOVE_DOWN
				                                    &none 		&none 
			>;
		};
		five { display-name = "four val";
			bindings = <
				     &kp Q &td4 &kp E 				&kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE
				&fmt LCTRL LSHIFT &kp A &kp W &kp D 		&kp F2 &kp F3 &kp F5 &kp F6 
				           &kp S &td5 				&kp C_PREV &kp C_NEXT 
				                &mt R SPACE 			&kp C_PP
			>;
		};
		six { display-name = "five qwer";
			bindings = <
				      &kp N1 &kp N2 &kp N3 			&kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE
				&kp Q &kp W &kp E &kp R 			&kp F2 &kp F3 &kp F4 &kp F5 
				            &kp D &kp F 			&kp C_PREV &kp C_NEXT 
				                  &mt LCTRL N4 			&kp C_PP
			>;
		};
		seven { display-name = "six apex";
			bindings = <
				     &kp Q &kp N4 &kp E 			&kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE
				&kp LCTRL &kp A &kp W &kp D 			&kp F2 &kp F3 &kp F5 &kp F6 
				           &kp S &kp R 				&kp C_PREV &kp C_NEXT 
				                &kp SPACE 			&kp C_PP
			>;
		};
	};
};

/ {
	combos {
		compatible = "zmk,combos";

// game combos
		combo_1_game {
			timeout-ms = <90>;
			key-positions = <0 18>;
			bindings = <&kp N1>;
			layers = <4 6>;
		};
		combo_3_game {
			timeout-ms = <90>;
			key-positions = <2 18>;
			bindings = <&kp N3>;
			layers = <4 6>;
		};
		combo_4_game {
			timeout-ms = <90>;
			key-positions = <7 9>;
			bindings = <&kp N4>;
			layers = <4>;
		};
		combo_b_game {
			timeout-ms = <90>;
			key-positions = <14 15>;
			bindings = <&kp B>;
			layers = <4 6>;
		};
		combo_k_game {
			timeout-ms = <90>;
			key-positions = <6 18>;
			bindings = <&kp K>;
			layers = <4 6>;
		};
		combo_y_game {
			timeout-ms = <90>;
			key-positions = <6 18>;
			bindings = <&kp Y>;
			layers = <5>;
		};
// keyboard functions
		combo_bt_one {
			timeout-ms = <50>;
			key-positions = <6 7 8 9>;
			bindings = <&bt BT_SEL 0>;
			layers = <0>;
		};
		combo_bt_two {
			timeout-ms = <50>;
			key-positions = <10 11 12 13>;
			bindings = <&bt BT_SEL 1>;
			layers = <0>;
		};
		combo_mouse_layer {
			timeout-ms = <50>;
			key-positions = <18 19>;
			bindings = <&to 3>;
			layers = <0>;
		};
		combo_val_layer {
			timeout-ms = <50>;
			key-positions = <7 8 9>;
			bindings = <&to 4>;
			layers = <0>;
		};
		combo_qwer_layer {
			timeout-ms = <50>;
			key-positions = <6 7 9>;
			bindings = <&to 5>;
			layers = <0>;
		};
		combo_apex_layer {
			timeout-ms = <50>;
			key-positions = <1 7 9>;
			bindings = <&to 6>;
			layers = <0>;
		};
		combo_default_layer {
			timeout-ms = <50>;
			key-positions = <8 9 10 11>;
			bindings = <&to 0>;
			layers = <3 4 5 6>;
		};
// mod keys
		combo_del {
			timeout-ms = <50>;
			key-positions = <6 7>;
			bindings = <&kp DEL>;
			layers = <0 1 2>;
		};
		combo_tab {
			timeout-ms = <50>;
			key-positions = <0 2>;
			bindings = <&kp TAB>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <3 5>;
			bindings = <&kp ESC>;
		};
		combo_backspace {
			timeout-ms = <50>;
			key-positions = <12 13>;
			bindings = <&kp BSPC>;
			layers = <0 1 2>;
		};
		combo_enter {
			timeout-ms = <50>;
			key-positions = <9 10>;
			bindings = <&kp ENTER>;
			layers = <0 1 2>;
		};
		combo_playpause {
			timeout-ms = <50>;
			key-positions = <16 19>;
			bindings = <&kp C_PP>;
			layers = <2>;
		};
		combo_capsword {
			timeout-ms = <50>;
			key-positions = <6 13>;
			bindings = <&caps_word>;
			layers = <0>;
		};

// arrow keys
		combo_up {
			timeout-ms = <50>;
			key-positions = <8 11>;
			bindings = <&kp UP>;
		};
		combo_left {
			timeout-ms = <50>;
			key-positions = <7 10>;
			bindings = <&kp LEFT>;
		};
		combo_down {
			timeout-ms = <50>;
			key-positions = <14 17>;
			bindings = <&kp DOWN>;
		};
		combo_right {
			timeout-ms = <50>;
			key-positions = <9 12>;
			bindings = <&kp RIGHT>;
		};
// symbol keys
		combo_grave {
			timeout-ms = <50>;
			key-positions = <3 4>;
			bindings = <AS(GRAVE)>;
			layers = <1>;
		};
		combo_equal {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <AS(EQUAL)>;
			layers = <1>;
		};
		combo_bslh {
			timeout-ms = <50>;
			key-positions = <16 17>;
			bindings = <AS(BSLH)>;
			layers = <1>;
		};
// alpha keys
		combo_q {
			timeout-ms = <50>;
			key-positions = <0 6>;
			bindings = <&kp Q>;
			layers = <0>;
		};
		combo_r {
			timeout-ms = <50>;
			key-positions = <1 2>;
			bindings = <&kp R>;
			layers = <0>;
		};
		combo_y {
			timeout-ms = <50>;
			key-positions = <3 4>;
			bindings = <&kp Y>;
			layers = <0>;
		};
		combo_z {
			timeout-ms = <50>;
			key-positions = <5 13>;
			bindings = <&kp Z>;
			layers = <0>;
		};
		combo_g {
			timeout-ms = <50>;
			key-positions = <8 9>;
			bindings = <&kp G>;
			layers = <0>;
		};
		combo_j {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <&kp J>;
			layers = <0>;
		};
		combo_v {
			timeout-ms = <50>;
			key-positions = <14 15>;
			bindings = <&kp V>;
			layers = <0>;
		};
		combo_x {
			timeout-ms = <50>;
			key-positions = <16 17>;
			bindings = <&kp X>;
			layers = <0>;
		};
	};
};



