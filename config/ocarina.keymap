#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600

#include <dt-bindings/zmk/pointing.h>

#define AS(keycode) &as LS(keycode) keycode   

/ {
	macros {
        	qu: qu {
            		compatible = "zmk,behavior-macro";
            		#binding-cells = <0>;
            		bindings
                	= <&macro_tap &kp Q &kp U>
                	;
        	};
	};
	behaviors {
		td0: tap_dance_0 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LPAR>, <&kp RPAR>;
		};
		td1: tap_dance_1 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LBRC>,<&kp RBRC>;
		};
		td2: tap_dance_2 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <225>;
			bindings = <&kp LBKT>,<&kp RBKT>;
		};
		hml: home_row_mod_left {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "balanced";
            		require-prior-idle-ms = <100>;
            		tapping-term-ms = <250>;
            		quick-tap-ms = <175>;
            		bindings = <&kp>, <&kp>;
            		hold-trigger-key-positions = <3 4 5 10 11 12 13 16 17 19>; // List of keys on the right
            		hold-trigger-on-release;
        	};
        	hmr: home_row_mod_right {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		flavor = "balanced";
            		require-prior-idle-ms = <100>;
            		tapping-term-ms = <250>;
            		quick-tap-ms = <175>;
            		bindings = <&kp>, <&kp>;
            		hold-trigger-key-positions = <0 1 2 6 7 8 9 14 15 18>; // List of keys on the left
            		hold-trigger-on-release;
        	};
		as: auto_shift {
            		compatible = "zmk,behavior-hold-tap";
            		#binding-cells = <2>;
            		tapping_term_ms = <175>;
            		quick_tap_ms = <0>;
            		flavor = "tap-preferred";
            		bindings = <&kp>, <&kp>;
        	};
		hw_soft_off: hw_soft_off {
            		compatible = "zmk,behavior-soft-off";
            		#binding-cells = <0>;
            		split-peripheral-off-on-press; // Turn peripheral off immediately for reliability
            		hold-time-ms = <1000>; // Only turn off if the key is held for 1 second or longer.
        	};
		mt: mod_tap {
            		tapping-term-ms = <250>;
        	};
	};
	keymap {
		compatible = "zmk,keymap";
		zero {
			display-name = "zero - base";
			bindings = <
				&none &kp U &kp O &hml LGUI G &kp K &kp F &hmr RGUI M &kp Y &kp C &qu
				&hml LSHIFT A &kp I &hml LALT E &hml LCTRL T &kp V &kp P &hmr RCTRL N &hmr LALT S &kp D &hmr RSHIFT H
				&kp X &kp B &none &none &kp L &kp W
				&lt 3 J &lt 2 R &lt 1 SPACE &lt 4 Z &hw_soft_off
			>;
		};
		one { display-name = "one - numbers and icons";
			bindings = <
				AS(GRAVE) AS(N1) AS(N2) AS(N3) &none AS(EQUAL) &td0 &td1 &td2 &none      
				AS(N0) AS(N4) AS(N5) AS(N6) &none AS(BSLH) AS(SEMI) AS(COMMA) AS(DOT) AS(FSLH)     
				AS(N7) AS(N8) &none &none AS(APOS) AS(MINUS)     
				&none  AS(N9) &none &none &hw_soft_off
			>;
		};
		two { display-name = "two - navigation and kb functions";
			bindings = <
				&none &studio_unlock &bt BT_CLR_ALL &hw_soft_off &none &none &kp C_PREV &kp C_PP &kp C_NEXT &none
				&none &kp HOME &kp PGUP &kp END &none &none &kp LEFT &kp UP &kp RIGHT &none
				&kp PGDN &none &none &none &kp C_VOL_UP &kp DOWN
				&none &none &kp C_VOL_DN &none &hw_soft_off
			>;
		};
		three { display-name = "three - mouse";
			bindings = <
				&none &none &none &none &none &none &mkp MB1 &mkp MB3 &mkp MB2 &none
				&none &msc SCRL_LEFT &msc SCRL_UP &msc SCRL_RIGHT &none &none &mmv MOVE_LEFT &mmv MOVE_UP &mmv MOVE_RIGHT &none 
				&msc SCRL_DOWN &none &none &none &to 3 &mmv MOVE_DOWN
				&none &none &none &none &hw_soft_off
			>;
		};
		four { display-name = "four - f keys";
			bindings = <
				&none &kp F1 &kp F2 &kp F3 &none &none &kp F4 &kp F5 &kp F6 &none 
				&kp LSHIFT &kp F7 &kp F8 &kp F9 &none &none &kp F10 &kp F11 &kp F12 &kp RGUI 
				&none &none &none &none &none &none 
				&kp LCTRL &kp LALT &none &none &hw_soft_off
			>;
		};
		five { display-name = "five - placeholder";
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none 
				&none &none &none &none &hw_soft_off
			>;
		};
		six { display-name = "six - placeholder";
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none 
				&none &none &none &none &hw_soft_off
			>;
		};
		seven { display-name = "seven - placeholder";
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none 
				&none &none &none &none &hw_soft_off
			>;
		};
		eight { display-name = "eight - fps";
			bindings = <
				&kp N1 &kp Q &kp N4 &kp E &kp N3 &none &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE &none
				&kp LSHIFT &kp A &kp W &kp D &kp F &kp F2 &kp F3 &kp F5 &kp F6 &none
				&kp S &kp C &kp X &kp C_PREV &kp C_NEXT &none
				&kp LCTRL &mt R SPACE &kp C_PP &none &hw_soft_off
			>;
		};
		nine { display-name = "nine - qwer";
			bindings = <
				&none &kp N1 &kp N2 &kp N3 &none &none &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE &none
				&kp Q &kp W &kp E &kp R &none &none &kp F2 &kp F3 &kp F4 &kp F5
				&kp D &kp F &none &none &kp C_PREV &kp C_NEXT 
				&none &mt LCTRL N4 &kp C_PP &none &hw_soft_off
			>;
		};
	};
};

/ {
	combos {
		compatible = "zmk,combos";

// keyboard functions
		combo_bt_one {
			timeout-ms = <50>;
			key-positions = <10 11 12 13>;
			bindings = <&bt BT_SEL 0>;
			layers = <0>;
		};
		combo_bt_two {
			timeout-ms = <50>;
			key-positions = <16 17 18 19>;
			bindings = <&bt BT_SEL 1>;
			layers = <0>;
		};
		combo_fps_layer {
			timeout-ms = <50>;
			key-positions = <11 12 13>;
			bindings = <&to 8>;
			layers = <0>;
		};
		combo_qwer_layer {
			timeout-ms = <50>;
			key-positions = <10 11 13>;
			bindings = <&to 9>;
			layers = <0>;
		};
		combo_default_layer {
			timeout-ms = <50>;
			key-positions = <12 13 16 17>;
			bindings = <&to 0>;
		};
// mod keys
		combo_del {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <&kp DEL>;
			layers = <0 1 2>;
		};
		combo_tab {
			timeout-ms = <50>;
			key-positions = <1 3>;
			bindings = <&kp TAB>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <6 8>;
			bindings = <&kp ESC>;
		};
		combo_backspace {
			timeout-ms = <50>;
			key-positions = <18 19>;
			bindings = <&kp BSPC>;
			layers = <0 1 2>;
		};
		combo_enter {
			timeout-ms = <50>;
			key-positions = <13 16>;
			bindings = <&kp ENTER>;
			layers = <0 1 2>;
		};
		combo_capsword {
			timeout-ms = <50>;
			key-positions = <10 19>;
			bindings = <&caps_word>;
			layers = <0>;
		};
// arrow keys
		combo_up {
			timeout-ms = <50>;
			key-positions = <12 17>;
			bindings = <&kp UP>;
		};
		combo_left {
			timeout-ms = <50>;
			key-positions = <11 16>;
			bindings = <&kp LEFT>;
		};
		combo_down {
			timeout-ms = <50>;
			key-positions = <20 25>;
			bindings = <&kp DOWN>;
		};
		combo_right {
			timeout-ms = <50>;
			key-positions = <13 18>;
			bindings = <&kp RIGHT>;
		};
// game 
		combo_b_game {
			timeout-ms = <90>;
			key-positions = <20 21>;
			bindings = <&kp B>;
			layers = <8>;
		};
		combo_k_game {
			timeout-ms = <90>;
			key-positions = <10 27>;
			bindings = <&kp K>;
			layers = <8>;
		};
	};
};



